/**
 * 319. 灯泡开关
 * https://leetcode-cn.com/problems/bulb-switcher/
 *
 * 初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。
 * 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，
 * 每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
 *
 * 示例:
 * 输入: 3
 * 输出: 1
 * 解释:
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 * 你应该返回 1，因为只有一个灯泡还亮着。
 */

public class BulbSwitch {
    /**
     * 算法：
     *   知识点：只有具有奇数个因数的数才能开着。
     *
     *  因常数 K， 至少有k = 1 * k;  因1：开， 则k：关
     *  又k = x * y（x != y）; 则K有偶数个因数 1，x, y , k, 无论顺序如何，会有两次开，两次关。则最后状态是关。
     *  如果 x 等于 y，则K有奇数个因数 1，x, k, 则K最后状态是开。
     *  所以只有当一个数是一个平方数的时候，才会有奇数个因数，最终状态才会是开。
     *  于是变成求 1...n中的平方数的个数。 有m = sqrt(n); 则1...m的平方都是要找的平方数。即会有m个灯最终开着。
     *
     *  注：
     *    如果不使用这个知识点，硬算，最终会超时。
     */
    public int bulbSwitch(int n) {
        return (int)Math.sqrt(n);
    }



//    public int bulbSwitch(int n) {
//        if (n <= 0) return 0;
//
//        boolean[] bulb = new boolean[n + 1];
//        for (int i = 2; i <= n; i++) {
//            for (int j = i; j <= n; j += i) {
//                bulb[j] = !bulb[j];
//            }
//        }
//
//        int rst = 0;
//        for (int i = 1; i <= n; i++) {
//            if (!bulb[i]) rst++;
//        }
//        return rst;
//    }
}
